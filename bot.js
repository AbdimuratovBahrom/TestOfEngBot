import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import dotenv from 'dotenv';
import { beginnerQuestions, intermediateQuestions, advancedQuestions } from './questions.js';
import { saveResult, getTop10Results, getUserResults } from './db.js';

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = process.env.PORT || 3000;

if (!TOKEN || !WEBHOOK_URL) {
  console.error('‚ùå BOT_TOKEN –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env');
  process.exit(1);
}

const bot = new TelegramBot(TOKEN, { webHook: { port: PORT } });
bot.setWebHook(`${WEBHOOK_URL}/bot${TOKEN}`);

const app = express();
app.use(express.json());
app.get('/', (_, res) => res.send('ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.post(`/bot${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ: app.listen(PORT), –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç –±–æ—Ç–æ–º

const userStates = new Map();

function getRandomQuestions(questions, count = 20) {
  const shuffled = [...questions].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function createQuestionMessage(state) {
  const q = state.questions[state.index];
  return `üß† <b>–í–æ–ø—Ä–æ—Å ${state.index + 1}/${state.questions.length}:</b>\n${q.question}`;
}

function sendNextQuestion(chatId) {
  const state = userStates.get(chatId);

  if (!state || state.index >= state.questions.length) {
    const score = state.correct;
    const total = state.questions.length;
    const level = state.level;
    bot.sendMessage(chatId, `üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}/${total}`, {
      reply_markup: { remove_keyboard: true },
    });
    saveResult(chatId, level, score);
    userStates.delete(chatId);
    return;
  }

  const q = state.questions[state.index];
  const message = createQuestionMessage(state);
  const buttons = q.options.map((opt) => [{ text: `üîò ${opt}`, callback_data: opt }]);

  bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: buttons },
  });
}

// –ö–æ–º–∞–Ω–¥—ã
bot.setMyCommands([
  { command: 'start', description: '–ù–∞—á–∞—Ç—å' },
  { command: 'help', description: '–ü–æ–º–æ—â—å' },
  { command: 'info', description: '–û –±–æ—Ç–µ' },
  { command: 'level', description: '–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å' },
  { command: 'top10', description: 'üèÜ –¢–æ–ø 10' },
]);

// /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', {
    reply_markup: {
      keyboard: [
        [{ text: 'üìö –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å /level' }],
        [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å /help' }, { text: 'üèÜ –¢–æ–ø 10 /top10' }],
      ],
      resize_keyboard: true,
    },
  });
});

// /help
bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id, `‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>

1. –ù–∞–∂–º–∏—Ç–µ "üìö –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å".
2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 20 –≤–æ–ø—Ä–æ—Å–æ–≤.
3. –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
4. –°–º–æ—Ç—Ä–∏—Ç–µ –¢–æ–ø 10.

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üéì`, { parse_mode: 'HTML' });
});

// /info
bot.onText(/\/info/, (msg) => {
  bot.sendMessage(msg.chat.id, `ü§ñ <b>English Quiz Bot</b>
üìå –ê–≤—Ç–æ—Ä: @AbdimuratovBahrom
üí° –£—Ä–æ–≤–Ω–∏: Beginner, Intermediate, Advanced
üìä –ö–æ–º–∞–Ω–¥—ã: /level, /top10, /myresults
`, { parse_mode: 'HTML' });
});

// /level
bot.onText(/\/level/, (msg) => {
  const levels = [
    [{ text: 'üî∞ Beginner', callback_data: 'level_beginner' }],
    [{ text: '‚öôÔ∏è Intermediate', callback_data: 'level_intermediate' }],
    [{ text: 'üöÄ Advanced', callback_data: 'level_advanced' }],
  ];
  bot.sendMessage(msg.chat.id, 'üìö –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', {
    reply_markup: { inline_keyboard: levels },
  });
});

// /top10
bot.onText(/\/top10/, async (msg) => {
  const top = await getTop10Results();
  if (top.length === 0) return bot.sendMessage(msg.chat.id, '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
  const message = 'üèÜ <b>–¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>\n\n' + top.map((r, i) =>
    `${i + 1}. üë§ <b>${r.user_id}</b> ‚Äî ${r.score}/20 (${r.level})`).join('\n');
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
});

// inline –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  try {
    await bot.answerCallbackQuery(query.id);
  } catch (err) {
    console.warn('‚ö†Ô∏è answerCallbackQuery error:', err.message);
  }

  const state = userStates.get(chatId);

  if (data.startsWith('level_')) {
    const level = data.replace('level_', '');
    startQuiz(chatId, level);
  } else if (state) {
    const q = state.questions[state.index];
    const isCorrect = data === q.correctAnswer;

    await bot.sendMessage(chatId,
      isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${q.correctAnswer}`
    );

    if (isCorrect) state.correct++;
    state.index++;

    setTimeout(() => sendNextQuestion(chatId), 1000);
  }
});

// –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
function startQuiz(chatId, level) {
  let questions;
  switch (level) {
    case 'beginner': questions = beginnerQuestions; break;
    case 'intermediate': questions = intermediateQuestions; break;
    case 'advanced': questions = advancedQuestions; break;
    default: return;
  }

  const selected = getRandomQuestions(questions);
  userStates.set(chatId, { level, questions: selected, index: 0, correct: 0 });
  sendNextQuestion(chatId);
}
